package com.example.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendao.bean.MessCtData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESS_CT_DATA".
*/
public class MessCtDataDao extends AbstractDao<MessCtData, Long> {

    public static final String TABLENAME = "MESS_CT_DATA";

    /**
     * Properties of entity MessCtData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, int.class, "pid", false, "PID");
        public final static Property State = new Property(2, int.class, "state", false, "STATE");
        public final static Property Radius = new Property(3, int.class, "radius", false, "RADIUS");
        public final static Property Lat = new Property(4, double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(5, double.class, "lon", false, "LON");
        public final static Property Scenic = new Property(6, int.class, "scenic", false, "SCENIC");
        public final static Property SuitableTime = new Property(7, int.class, "suitableTime", false, "SUITABLE_TIME");
        public final static Property OptimumTime = new Property(8, String.class, "optimumTime", false, "OPTIMUM_TIME");
        public final static Property Sid = new Property(9, int.class, "sid", false, "SID");
        public final static Property Grade = new Property(10, int.class, "grade", false, "GRADE");
        public final static Property Scode = new Property(11, int.class, "scode", false, "SCODE");
        public final static Property IsUsed = new Property(12, int.class, "isUsed", false, "IS_USED");
        public final static Property Name = new Property(13, String.class, "name", false, "NAME");
        public final static Property Code = new Property(14, String.class, "code", false, "CODE");
        public final static Property Type = new Property(15, String.class, "type", false, "TYPE");
        public final static Property CodeType = new Property(16, int.class, "codeType", false, "CODE_TYPE");
        public final static Property Distance = new Property(17, int.class, "distance", false, "DISTANCE");
        public final static Property EnName = new Property(18, String.class, "enName", false, "EN_NAME");
        public final static Property PicUrl = new Property(19, String.class, "picUrl", false, "PIC_URL");
        public final static Property Comment = new Property(20, String.class, "comment", false, "COMMENT");
        public final static Property ResDetail = new Property(21, int.class, "resDetail", false, "RES_DETAIL");
        public final static Property Description = new Property(22, String.class, "description", false, "DESCRIPTION");
        public final static Property RedLangue = new Property(23, String.class, "redLangue", false, "RED_LANGUE");
        public final static Property StartTime = new Property(24, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(25, String.class, "endTime", false, "END_TIME");
        public final static Property Result = new Property(26, String.class, "result", false, "RESULT");
        public final static Property Video = new Property(27, String.class, "video", false, "VIDEO");
    }


    public MessCtDataDao(DaoConfig config) {
        super(config);
    }
    
    public MessCtDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESS_CT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PID\" INTEGER NOT NULL ," + // 1: pid
                "\"STATE\" INTEGER NOT NULL ," + // 2: state
                "\"RADIUS\" INTEGER NOT NULL ," + // 3: radius
                "\"LAT\" REAL NOT NULL ," + // 4: lat
                "\"LON\" REAL NOT NULL ," + // 5: lon
                "\"SCENIC\" INTEGER NOT NULL ," + // 6: scenic
                "\"SUITABLE_TIME\" INTEGER NOT NULL ," + // 7: suitableTime
                "\"OPTIMUM_TIME\" TEXT," + // 8: optimumTime
                "\"SID\" INTEGER NOT NULL ," + // 9: sid
                "\"GRADE\" INTEGER NOT NULL ," + // 10: grade
                "\"SCODE\" INTEGER NOT NULL ," + // 11: scode
                "\"IS_USED\" INTEGER NOT NULL ," + // 12: isUsed
                "\"NAME\" TEXT," + // 13: name
                "\"CODE\" TEXT," + // 14: code
                "\"TYPE\" TEXT," + // 15: type
                "\"CODE_TYPE\" INTEGER NOT NULL ," + // 16: codeType
                "\"DISTANCE\" INTEGER NOT NULL ," + // 17: distance
                "\"EN_NAME\" TEXT," + // 18: enName
                "\"PIC_URL\" TEXT," + // 19: picUrl
                "\"COMMENT\" TEXT," + // 20: comment
                "\"RES_DETAIL\" INTEGER NOT NULL ," + // 21: resDetail
                "\"DESCRIPTION\" TEXT," + // 22: description
                "\"RED_LANGUE\" TEXT," + // 23: redLangue
                "\"START_TIME\" TEXT," + // 24: startTime
                "\"END_TIME\" TEXT," + // 25: endTime
                "\"RESULT\" TEXT," + // 26: result
                "\"VIDEO\" TEXT);"); // 27: video
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESS_CT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessCtData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPid());
        stmt.bindLong(3, entity.getState());
        stmt.bindLong(4, entity.getRadius());
        stmt.bindDouble(5, entity.getLat());
        stmt.bindDouble(6, entity.getLon());
        stmt.bindLong(7, entity.getScenic());
        stmt.bindLong(8, entity.getSuitableTime());
 
        String optimumTime = entity.getOptimumTime();
        if (optimumTime != null) {
            stmt.bindString(9, optimumTime);
        }
        stmt.bindLong(10, entity.getSid());
        stmt.bindLong(11, entity.getGrade());
        stmt.bindLong(12, entity.getScode());
        stmt.bindLong(13, entity.getIsUsed());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(14, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(15, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(16, type);
        }
        stmt.bindLong(17, entity.getCodeType());
        stmt.bindLong(18, entity.getDistance());
 
        String enName = entity.getEnName();
        if (enName != null) {
            stmt.bindString(19, enName);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(20, picUrl);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(21, comment);
        }
        stmt.bindLong(22, entity.getResDetail());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(23, description);
        }
 
        String redLangue = entity.getRedLangue();
        if (redLangue != null) {
            stmt.bindString(24, redLangue);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(25, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(26, endTime);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(27, result);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(28, video);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessCtData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPid());
        stmt.bindLong(3, entity.getState());
        stmt.bindLong(4, entity.getRadius());
        stmt.bindDouble(5, entity.getLat());
        stmt.bindDouble(6, entity.getLon());
        stmt.bindLong(7, entity.getScenic());
        stmt.bindLong(8, entity.getSuitableTime());
 
        String optimumTime = entity.getOptimumTime();
        if (optimumTime != null) {
            stmt.bindString(9, optimumTime);
        }
        stmt.bindLong(10, entity.getSid());
        stmt.bindLong(11, entity.getGrade());
        stmt.bindLong(12, entity.getScode());
        stmt.bindLong(13, entity.getIsUsed());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(14, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(15, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(16, type);
        }
        stmt.bindLong(17, entity.getCodeType());
        stmt.bindLong(18, entity.getDistance());
 
        String enName = entity.getEnName();
        if (enName != null) {
            stmt.bindString(19, enName);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(20, picUrl);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(21, comment);
        }
        stmt.bindLong(22, entity.getResDetail());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(23, description);
        }
 
        String redLangue = entity.getRedLangue();
        if (redLangue != null) {
            stmt.bindString(24, redLangue);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(25, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(26, endTime);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(27, result);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(28, video);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessCtData readEntity(Cursor cursor, int offset) {
        MessCtData entity = new MessCtData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // pid
            cursor.getInt(offset + 2), // state
            cursor.getInt(offset + 3), // radius
            cursor.getDouble(offset + 4), // lat
            cursor.getDouble(offset + 5), // lon
            cursor.getInt(offset + 6), // scenic
            cursor.getInt(offset + 7), // suitableTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // optimumTime
            cursor.getInt(offset + 9), // sid
            cursor.getInt(offset + 10), // grade
            cursor.getInt(offset + 11), // scode
            cursor.getInt(offset + 12), // isUsed
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // code
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // type
            cursor.getInt(offset + 16), // codeType
            cursor.getInt(offset + 17), // distance
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // enName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // picUrl
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // comment
            cursor.getInt(offset + 21), // resDetail
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // description
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // redLangue
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // startTime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // endTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // result
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // video
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessCtData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.getInt(offset + 1));
        entity.setState(cursor.getInt(offset + 2));
        entity.setRadius(cursor.getInt(offset + 3));
        entity.setLat(cursor.getDouble(offset + 4));
        entity.setLon(cursor.getDouble(offset + 5));
        entity.setScenic(cursor.getInt(offset + 6));
        entity.setSuitableTime(cursor.getInt(offset + 7));
        entity.setOptimumTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSid(cursor.getInt(offset + 9));
        entity.setGrade(cursor.getInt(offset + 10));
        entity.setScode(cursor.getInt(offset + 11));
        entity.setIsUsed(cursor.getInt(offset + 12));
        entity.setName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCodeType(cursor.getInt(offset + 16));
        entity.setDistance(cursor.getInt(offset + 17));
        entity.setEnName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPicUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setComment(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setResDetail(cursor.getInt(offset + 21));
        entity.setDescription(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRedLangue(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setStartTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setEndTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setResult(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setVideo(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessCtData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessCtData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessCtData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
