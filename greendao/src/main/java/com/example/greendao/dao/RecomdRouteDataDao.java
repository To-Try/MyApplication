package com.example.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendao.bean.RecomdRouteData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECOMD_ROUTE_DATA".
*/
public class RecomdRouteDataDao extends AbstractDao<RecomdRouteData, Long> {

    public static final String TABLENAME = "RECOMD_ROUTE_DATA";

    /**
     * Properties of entity RecomdRouteData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property State = new Property(1, int.class, "state", false, "STATE");
        public final static Property Lat = new Property(2, double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(3, double.class, "lon", false, "LON");
        public final static Property ViewId = new Property(4, int.class, "viewId", false, "VIEW_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property StartId = new Property(6, int.class, "startId", false, "START_ID");
        public final static Property TouristId = new Property(7, int.class, "touristId", false, "TOURIST_ID");
        public final static Property LineId = new Property(8, String.class, "lineId", false, "LINE_ID");
        public final static Property Comment = new Property(9, String.class, "comment", false, "COMMENT");
        public final static Property StrengthId = new Property(10, int.class, "strengthId", false, "STRENGTH_ID");
        public final static Property TourTypeId = new Property(11, int.class, "tourTypeId", false, "TOUR_TYPE_ID");
        public final static Property CoverPic = new Property(12, String.class, "coverPic", false, "COVER_PIC");
        public final static Property StartTime = new Property(13, String.class, "startTime", false, "START_TIME");
        public final static Property StartName = new Property(14, String.class, "startName", false, "START_NAME");
        public final static Property UpdateTime = new Property(15, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property PeopleCount = new Property(16, String.class, "peopleCount", false, "PEOPLE_COUNT");
        public final static Property StartTimeStr = new Property(17, String.class, "startTimeStr", false, "START_TIME_STR");
    }


    public RecomdRouteDataDao(DaoConfig config) {
        super(config);
    }
    
    public RecomdRouteDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOMD_ROUTE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATE\" INTEGER NOT NULL ," + // 1: state
                "\"LAT\" REAL NOT NULL ," + // 2: lat
                "\"LON\" REAL NOT NULL ," + // 3: lon
                "\"VIEW_ID\" INTEGER NOT NULL ," + // 4: viewId
                "\"NAME\" TEXT," + // 5: name
                "\"START_ID\" INTEGER NOT NULL ," + // 6: startId
                "\"TOURIST_ID\" INTEGER NOT NULL ," + // 7: touristId
                "\"LINE_ID\" TEXT," + // 8: lineId
                "\"COMMENT\" TEXT," + // 9: comment
                "\"STRENGTH_ID\" INTEGER NOT NULL ," + // 10: strengthId
                "\"TOUR_TYPE_ID\" INTEGER NOT NULL ," + // 11: tourTypeId
                "\"COVER_PIC\" TEXT," + // 12: coverPic
                "\"START_TIME\" TEXT," + // 13: startTime
                "\"START_NAME\" TEXT," + // 14: startName
                "\"UPDATE_TIME\" TEXT," + // 15: updateTime
                "\"PEOPLE_COUNT\" TEXT," + // 16: peopleCount
                "\"START_TIME_STR\" TEXT);"); // 17: startTimeStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOMD_ROUTE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecomdRouteData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
        stmt.bindDouble(3, entity.getLat());
        stmt.bindDouble(4, entity.getLon());
        stmt.bindLong(5, entity.getViewId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getStartId());
        stmt.bindLong(8, entity.getTouristId());
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(9, lineId);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(10, comment);
        }
        stmt.bindLong(11, entity.getStrengthId());
        stmt.bindLong(12, entity.getTourTypeId());
 
        String coverPic = entity.getCoverPic();
        if (coverPic != null) {
            stmt.bindString(13, coverPic);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(14, startTime);
        }
 
        String startName = entity.getStartName();
        if (startName != null) {
            stmt.bindString(15, startName);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(16, updateTime);
        }
 
        String peopleCount = entity.getPeopleCount();
        if (peopleCount != null) {
            stmt.bindString(17, peopleCount);
        }
 
        String startTimeStr = entity.getStartTimeStr();
        if (startTimeStr != null) {
            stmt.bindString(18, startTimeStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecomdRouteData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
        stmt.bindDouble(3, entity.getLat());
        stmt.bindDouble(4, entity.getLon());
        stmt.bindLong(5, entity.getViewId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getStartId());
        stmt.bindLong(8, entity.getTouristId());
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(9, lineId);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(10, comment);
        }
        stmt.bindLong(11, entity.getStrengthId());
        stmt.bindLong(12, entity.getTourTypeId());
 
        String coverPic = entity.getCoverPic();
        if (coverPic != null) {
            stmt.bindString(13, coverPic);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(14, startTime);
        }
 
        String startName = entity.getStartName();
        if (startName != null) {
            stmt.bindString(15, startName);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(16, updateTime);
        }
 
        String peopleCount = entity.getPeopleCount();
        if (peopleCount != null) {
            stmt.bindString(17, peopleCount);
        }
 
        String startTimeStr = entity.getStartTimeStr();
        if (startTimeStr != null) {
            stmt.bindString(18, startTimeStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecomdRouteData readEntity(Cursor cursor, int offset) {
        RecomdRouteData entity = new RecomdRouteData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // state
            cursor.getDouble(offset + 2), // lat
            cursor.getDouble(offset + 3), // lon
            cursor.getInt(offset + 4), // viewId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.getInt(offset + 6), // startId
            cursor.getInt(offset + 7), // touristId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lineId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comment
            cursor.getInt(offset + 10), // strengthId
            cursor.getInt(offset + 11), // tourTypeId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // coverPic
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // startTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // startName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // updateTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // peopleCount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // startTimeStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecomdRouteData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.getInt(offset + 1));
        entity.setLat(cursor.getDouble(offset + 2));
        entity.setLon(cursor.getDouble(offset + 3));
        entity.setViewId(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartId(cursor.getInt(offset + 6));
        entity.setTouristId(cursor.getInt(offset + 7));
        entity.setLineId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComment(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStrengthId(cursor.getInt(offset + 10));
        entity.setTourTypeId(cursor.getInt(offset + 11));
        entity.setCoverPic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStartTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStartName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpdateTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPeopleCount(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStartTimeStr(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecomdRouteData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecomdRouteData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecomdRouteData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
